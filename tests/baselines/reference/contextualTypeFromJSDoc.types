=== tests/cases/conformance/types/contextualTypes/jsdoc/index.js ===
/** @type {Array<[string, {x?:number, y?:number}]>} */
const arr = [
>arr : [string, { x?: number; y?: number; }][]
>[    ['a', { x: 1 }],    ['b', { y: 2 }]] : ([string, { x: number; }] | [string, { y: number; }])[]

    ['a', { x: 1 }],
>['a', { x: 1 }] : [string, { x: number; }]
>'a' : "a"
>{ x: 1 } : { x: number; }
>x : number
>1 : 1

    ['b', { y: 2 }]
>['b', { y: 2 }] : [string, { y: number; }]
>'b' : "b"
>{ y: 2 } : { y: number; }
>y : number
>2 : 2

];

/** @return {function(): Array<[string, {x?:number, y?:number}]>} */
function f() {
>f : () => () => [string, { x?: number; y?: number; }][]

    return [
>[        ['a', { x: 1 }],        ['b', { y: 2 }]    ] : ((string | { [x: string]: any; x: number; })[] | (string | { [x: string]: any; y: number; })[])[]

        ['a', { x: 1 }],
>['a', { x: 1 }] : (string | { [x: string]: any; x: number; })[]
>'a' : "a"
>{ x: 1 } : { [x: string]: any; x: number; }
>x : number
>1 : 1

        ['b', { y: 2 }]
>['b', { y: 2 }] : (string | { [x: string]: any; y: number; })[]
>'b' : "b"
>{ y: 2 } : { [x: string]: any; y: number; }
>y : number
>2 : 2

    ];
}

class C {
>C : C

    /** @param {function(): Array<[string, {x?:number, y?:number}]>} value */
    set x(value) { }
>x : any
>value : () => [string, { x?: number; y?: number; }][]

    get () {
>get : () => ((string | { [x: string]: any; x: number; })[] | (string | { [x: string]: any; y: number; })[])[]

        return [
>[            ['a', { x: 1 }],            ['b', { y: 2 }]        ] : ((string | { [x: string]: any; x: number; })[] | (string | { [x: string]: any; y: number; })[])[]

            ['a', { x: 1 }],
>['a', { x: 1 }] : (string | { [x: string]: any; x: number; })[]
>'a' : "a"
>{ x: 1 } : { [x: string]: any; x: number; }
>x : number
>1 : 1

            ['b', { y: 2 }]
>['b', { y: 2 }] : (string | { [x: string]: any; y: number; })[]
>'b' : "b"
>{ y: 2 } : { [x: string]: any; y: number; }
>y : number
>2 : 2

        ];
    }
}
