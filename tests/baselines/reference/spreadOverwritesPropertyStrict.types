=== tests/cases/conformance/types/spread/spreadOverwritesPropertyStrict.ts ===
declare var ab: { a: number, b: number };
>ab : { a: number; b: number; }
>a : number
>b : number

declare var abq: { a: number, b?: number };
>abq : { a: number; b?: number | undefined; }
>a : number
>b : number | undefined

var unused1 = { b: 1, ...ab }
>unused1 : { a: number; b: number; }
>{ b: 1, ...ab } : { a: number; b: number; }
>b : number
>1 : 1
>ab : { a: number; b: number; }

var unused2 = { ...ab, ...ab }
>unused2 : { a: number; b: number; }
>{ ...ab, ...ab } : { a: number; b: number; }
>ab : { a: number; b: number; }
>ab : { a: number; b: number; }

var unused3 = { b: 1, ...abq }
>unused3 : { a: number; b: number; }
>{ b: 1, ...abq } : { a: number; b: number; }
>b : number
>1 : 1
>abq : { a: number; b?: number | undefined; }

function g(obj: { x: number | undefined }) {
>g : (obj: { x: number | undefined; }) => { x: number | undefined; }
>obj : { x: number | undefined; }
>x : number | undefined

    return { x: 1, ...obj }; // should be allowed because of undefined
>{ x: 1, ...obj } : { x: number | undefined; }
>x : number
>1 : 1
>obj : { x: number | undefined; }
}
function f(obj: { x: number } | undefined) {
>f : (obj: { x: number; } | undefined) => { x: number; } | { x: number; }
>obj : { x: number; } | undefined
>x : number

    return { x: 1, ...obj };
>{ x: 1, ...obj } : { x: number; } | { x: number; }
>x : number
>1 : 1
>obj : { x: number; } | undefined
}

