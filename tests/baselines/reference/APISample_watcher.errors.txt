typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8926,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8926,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9186,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9186,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9536,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9536,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9560,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9560,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9647,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9647,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10812,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10812,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10823,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10823,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10833,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10833,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10908,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10908,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10965,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10965,47): error TS1005: ';' expected.
typescript_standalone.d.ts(11019,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11019,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11039,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11039,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11049,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11049,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11083,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11083,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11086,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11086,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11090,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11090,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11108,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11108,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11134,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11137,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11137,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11149,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11149,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11179,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11179,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11213,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11213,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11224,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11224,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11248,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11248,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11256,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11256,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11260,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11260,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11290,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11290,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11333,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11333,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11520,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11522,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11522,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11526,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11526,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11528,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11528,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11530,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11530,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11532,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11532,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11534,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11534,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11553,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11555,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11557,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11559,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11559,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11561,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11561,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11563,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11563,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11565,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11565,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11581,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11583,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11585,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11585,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11587,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11587,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11589,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11589,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11591,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11593,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11595,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11597,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11669,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11669,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11671,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11671,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11673,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11673,71): error TS1005: ';' expected.
typescript_standalone.d.ts(11675,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11675,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11751,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11751,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_watcher.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The sample sources can be found
             at: https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API#incremental-build-support-using-the-language-services
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var process: any;
    declare var console: any;
    declare var fs: {
        existsSync(path: string): boolean;
        readdirSync(path: string): string[];
        readFileSync(filename: string, encoding?: string): string;
        writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; } | string): void;
        watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: { mtime: Date }, prev: { mtime: Date }) => void): void;
    };
    declare var path: any;
    
    import * as ts from "typescript";
    
    function watch(rootFileNames: string[], options: ts.CompilerOptions) {
        const files: ts.MapLike<{ version: number }> = {};
    
        // initialize the list of files
        rootFileNames.forEach(fileName => {
            files[fileName] = { version: 0 };
        });
    
        // Create the language service host to allow the LS to communicate with the host
        const servicesHost: ts.LanguageServiceHost = {
            getScriptFileNames: () => rootFileNames,
            getScriptVersion: (fileName) => files[fileName] && files[fileName].version.toString(),
            getScriptSnapshot: (fileName) => {
                if (!fs.existsSync(fileName)) {
                    return undefined;
                }
    
                return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
            },
            getCurrentDirectory: () => process.cwd(),
            getCompilationSettings: () => options,
            getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),
        };
    
        // Create the language service files
        const services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry())
    
        // Now let's watch the files
        rootFileNames.forEach(fileName => {
            // First time around, emit all files
            emitFile(fileName);
    
            // Add a watch on the file to handle next change
            fs.watchFile(fileName,
                { persistent: true, interval: 250 },
                (curr, prev) => {
                    // Check timestamp
                    if (+curr.mtime <= +prev.mtime) {
                        return;
                    }
    
                    // Update the version to signal a change in the file
                    files[fileName].version++;
    
                    // write the changes to disk
                    emitFile(fileName);
                });
        });
    
        function emitFile(fileName: string) {
            let output = services.getEmitOutput(fileName);
    
            if (!output.emitSkipped) {
                console.log(`Emitting ${fileName}`);
            }
            else {
                console.log(`Emitting ${fileName} failed`);
                logErrors(fileName);
            }
    
            output.outputFiles.forEach(o => {
                fs.writeFileSync(o.name, o.text, "utf8");
            });
        }
    
        function logErrors(fileName: string) {
            let allDiagnostics = services.getCompilerOptionsDiagnostics()
                .concat(services.getSyntacticDiagnostics(fileName))
                .concat(services.getSemanticDiagnostics(fileName));
    
            allDiagnostics.forEach(diagnostic => {
                let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, "\n");
                if (diagnostic.file) {
                    let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);
                    console.log(`  Error ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
                }
                else {
                    console.log(`  Error: ${message}`);
                }
            });
        }
    }
    
    // Initialize files constituting the program as all .ts files in the current directory
    const currentDirectoryFiles = fs.readdirSync(process.cwd()).
        filter(fileName=> fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === ".ts");
    
    // Start the watcher
    watch(currentDirectoryFiles, { module: ts.ModuleKind.CommonJS });
    