=== tests/cases/compiler/dynamicNamesErrors.ts ===
const c0 = "1";
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))

const c1 = 1;
>c1 : Symbol(c1, Decl(dynamicNamesErrors.ts, 1, 5))

interface T0 {
>T0 : Symbol(T0, Decl(dynamicNamesErrors.ts, 1, 13))

    [c0]: number;
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))

    1: number;
}

interface T1 {
>T1 : Symbol(T1, Decl(dynamicNamesErrors.ts, 6, 1))

    [c0]: number;
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))
}

interface T2 {
>T2 : Symbol(T2, Decl(dynamicNamesErrors.ts, 10, 1))

    [c0]: string;
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))
}

interface T3 {
>T3 : Symbol(T3, Decl(dynamicNamesErrors.ts, 14, 1))

    [c0]: number;
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))

    [c1]: string;
>c1 : Symbol(c1, Decl(dynamicNamesErrors.ts, 1, 5))
}

let t1: T1;
>t1 : Symbol(t1, Decl(dynamicNamesErrors.ts, 21, 3))
>T1 : Symbol(T1, Decl(dynamicNamesErrors.ts, 6, 1))

let t2: T2;
>t2 : Symbol(t2, Decl(dynamicNamesErrors.ts, 22, 3))
>T2 : Symbol(T2, Decl(dynamicNamesErrors.ts, 10, 1))

t1 = t2;
>t1 : Symbol(t1, Decl(dynamicNamesErrors.ts, 21, 3))
>t2 : Symbol(t2, Decl(dynamicNamesErrors.ts, 22, 3))

t2 = t1;
>t2 : Symbol(t2, Decl(dynamicNamesErrors.ts, 22, 3))
>t1 : Symbol(t1, Decl(dynamicNamesErrors.ts, 21, 3))

export interface T4 {
>T4 : Symbol(T4, Decl(dynamicNamesErrors.ts, 24, 8))

    [c0]: number;
>c0 : Symbol(c0, Decl(dynamicNamesErrors.ts, 0, 5))
}
