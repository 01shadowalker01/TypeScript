=== tests/cases/compiler/index.js ===
var Person = function (firstNameOrPojo, lastName) {
>Person : (firstNameOrPojo: any, lastName: any) => any
>function (firstNameOrPojo, lastName) {    if (typeof firstNameOrPojo === "string") {        this.firstName = firstNameOrPojo;        this.lastName = lastName;    } else {        return new Person(firstNameOrPojo.firstName, firstNameOrPojo.lastName);    }} : (firstNameOrPojo: any, lastName: any) => any
>firstNameOrPojo : any
>lastName : any

    if (typeof firstNameOrPojo === "string") {
>typeof firstNameOrPojo === "string" : boolean
>typeof firstNameOrPojo : "string" | "number" | "boolean" | "symbol" | "undefined" | "object" | "function"
>firstNameOrPojo : any
>"string" : "string"

        this.firstName = firstNameOrPojo;
>this.firstName = firstNameOrPojo : string
>this.firstName : any
>this : any
>firstName : any
>firstNameOrPojo : string

        this.lastName = lastName;
>this.lastName = lastName : any
>this.lastName : any
>this : any
>lastName : any
>lastName : any

    } else {
        return new Person(firstNameOrPojo.firstName, firstNameOrPojo.lastName);
>new Person(firstNameOrPojo.firstName, firstNameOrPojo.lastName) : { firstName: string; lastName: any; greet: () => string; }
>Person : (firstNameOrPojo: any, lastName: any) => any
>firstNameOrPojo.firstName : any
>firstNameOrPojo : any
>firstName : any
>firstNameOrPojo.lastName : any
>firstNameOrPojo : any
>lastName : any
    }
};

Person.prototype.greet = function greet() {
>Person.prototype.greet = function greet() {    return `Hello, I am ${this.firstName} ${this.lastName}.`;} : () => string
>Person.prototype.greet : any
>Person.prototype : any
>Person : (firstNameOrPojo: any, lastName: any) => any
>prototype : any
>greet : any
>function greet() {    return `Hello, I am ${this.firstName} ${this.lastName}.`;} : () => string
>greet : () => string

    return `Hello, I am ${this.firstName} ${this.lastName}.`;
>`Hello, I am ${this.firstName} ${this.lastName}.` : string
>this.firstName : string
>this : { firstName: string; lastName: any; greet: () => string; }
>firstName : string
>this.lastName : any
>this : { firstName: string; lastName: any; greet: () => string; }
>lastName : any

};

var fred = new Person({ firstName: "Fred", lastName: "Flintstone" });
>fred : { firstName: string; lastName: any; greet: () => string; }
>new Person({ firstName: "Fred", lastName: "Flintstone" }) : { firstName: string; lastName: any; greet: () => string; }
>Person : (firstNameOrPojo: any, lastName: any) => any
>{ firstName: "Fred", lastName: "Flintstone" } : { firstName: string; lastName: string; }
>firstName : string
>"Fred" : "Fred"
>lastName : string
>"Flintstone" : "Flintstone"

console.log(fred.greet());
>console.log(fred.greet()) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>fred.greet() : string
>fred.greet : () => string
>fred : { firstName: string; lastName: any; greet: () => string; }
>greet : () => string

