typescript_standalone.d.ts(21,28): error TS1005: ';' expected.
typescript_standalone.d.ts(21,41): error TS1005: ';' expected.
typescript_standalone.d.ts(8907,28): error TS1005: ';' expected.
typescript_standalone.d.ts(8907,42): error TS1005: ';' expected.
typescript_standalone.d.ts(9167,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9167,46): error TS1005: ';' expected.
typescript_standalone.d.ts(9517,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9517,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9541,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9541,36): error TS1005: ';' expected.
typescript_standalone.d.ts(9628,28): error TS1005: ';' expected.
typescript_standalone.d.ts(9628,38): error TS1005: ';' expected.
typescript_standalone.d.ts(10792,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10792,57): error TS1005: ';' expected.
typescript_standalone.d.ts(10803,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10803,41): error TS1005: ';' expected.
typescript_standalone.d.ts(10813,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10813,48): error TS1005: ';' expected.
typescript_standalone.d.ts(10888,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10888,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10945,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10945,47): error TS1005: ';' expected.
typescript_standalone.d.ts(10999,28): error TS1005: ';' expected.
typescript_standalone.d.ts(10999,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11019,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11019,44): error TS1005: ';' expected.
typescript_standalone.d.ts(11029,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11029,35): error TS1005: ';' expected.
typescript_standalone.d.ts(11063,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11063,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11066,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11066,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11070,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11070,45): error TS1005: ';' expected.
typescript_standalone.d.ts(11088,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11088,56): error TS1005: ';' expected.
typescript_standalone.d.ts(11114,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11114,36): error TS1005: ';' expected.
typescript_standalone.d.ts(11117,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11117,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11129,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11129,43): error TS1005: ';' expected.
typescript_standalone.d.ts(11159,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11159,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11193,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11193,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11204,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11204,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11228,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11228,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11236,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11236,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11240,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11240,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11270,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11270,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11313,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11313,41): error TS1005: ';' expected.
typescript_standalone.d.ts(11500,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11500,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11502,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11502,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11506,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11508,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11510,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11510,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11512,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11514,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11523,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11523,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11525,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11525,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11527,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11527,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11529,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11531,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11533,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11535,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11537,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11539,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11541,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11543,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11545,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11547,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11549,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11551,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11561,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11561,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11563,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11563,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11565,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11565,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11567,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11569,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11571,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11573,37): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11575,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11577,52): error TS1005: ';' expected.
typescript_standalone.d.ts(11649,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11649,72): error TS1005: ';' expected.
typescript_standalone.d.ts(11651,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11651,38): error TS1005: ';' expected.
typescript_standalone.d.ts(11653,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11653,40): error TS1005: ';' expected.
typescript_standalone.d.ts(11729,28): error TS1005: ';' expected.
typescript_standalone.d.ts(11729,48): error TS1005: ';' expected.


==== tests/cases/compiler/APISample_jsdoc.ts (0 errors) ====
    /*
     * Note: This test is a public API sample. The original sources can be found
     *       at: https://github.com/YousefED/typescript-json-schema
     *           https://github.com/vega/ts-json-schema-generator
     *       Please log a "breaking change" issue for any API breaking change affecting this issue
     */
    
    declare var console: any;
    
    import * as ts from "typescript";
    
    // excerpted from https://github.com/YousefED/typescript-json-schema
    // (converted from a method and modified; for example, `this: any` to compensate, among other changes)
    function parseCommentsIntoDefinition(this: any,
                                         symbol: ts.Symbol,
                                         definition: {description?: string, [s: string]: string | undefined},
                                         otherAnnotations: { [s: string]: true}): void {
        if (!symbol) {
            return;
        }
    
        // the comments for a symbol
        let comments = symbol.getDocumentationComment(undefined);
    
        if (comments.length) {
            definition.description = comments.map(comment => comment.kind === "lineBreak" ? comment.text : comment.text.trim().replace(/\r\n/g, "\n")).join("");
        }
    
        // jsdocs are separate from comments
        const jsdocs = symbol.getJsDocTags();
        jsdocs.forEach(doc => {
            // if we have @TJS-... annotations, we have to parse them
            const { name, text } = doc;
            if (this.userValidationKeywords[name]) {
                definition[name] = this.parseValue(text);
            } else {
                // special annotations
                otherAnnotations[doc.name] = true;
            }
        });
    }
    
    
    // excerpted from https://github.com/vega/ts-json-schema-generator
    export interface Annotations {
        [name: string]: any;
    }
    function getAnnotations(this: any, node: ts.Node): Annotations | undefined {
        const symbol: ts.Symbol = (node as any).symbol;
        if (!symbol) {
            return undefined;
        }
    
        const jsDocTags: ts.JSDocTagInfo[] = symbol.getJsDocTags();
        if (!jsDocTags || !jsDocTags.length) {
            return undefined;
        }
    
        const annotations: Annotations = jsDocTags.reduce((result: Annotations, jsDocTag: ts.JSDocTagInfo) => {
            const value = this.parseJsDocTag(jsDocTag);
            if (value !== undefined) {
                result[jsDocTag.name] = value;
            }
    
            return result;
        }, {});
        return Object.keys(annotations).length ? annotations : undefined;
    }
    
    // these examples are artificial and mostly nonsensical
    function parseSpecificTags(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.Parameter) {
            return ts.getJSDocParameterTags(node as ts.ParameterDeclaration);
        }
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            const func = node as ts.FunctionDeclaration;
            if (ts.hasJSDocParameterTags(func)) {
                const flat: ts.JSDocTag[] = [];
                for (const tags of func.parameters.map(ts.getJSDocParameterTags)) {
                    if (tags) flat.push(...tags);
                }
                return flat;
            }
        }
    }
    
    function getReturnTypeFromJSDoc(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
            return ts.getJSDocReturnType(node);
        }
        let type = ts.getJSDocType(node);
        if (type && type.kind === ts.SyntaxKind.FunctionType) {
            return (type as ts.FunctionTypeNode).type;
        }
    }
    
    function getAllTags(node: ts.Node) {
        ts.getJSDocTags(node);
    }
    
    function getSomeOtherTags(node: ts.Node) {
        const tags: (ts.JSDocTag | undefined)[] = [];
        tags.push(ts.getJSDocAugmentsTag(node));
        tags.push(ts.getJSDocClassTag(node));
        tags.push(ts.getJSDocReturnTag(node));
        const type = ts.getJSDocTypeTag(node);
        if (type) {
            tags.push(type);
        }
        tags.push(ts.getJSDocTemplateTag(node));
        return tags;
    }
    