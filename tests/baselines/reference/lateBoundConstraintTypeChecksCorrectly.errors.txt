tests/cases/compiler/lateBoundConstraintTypeChecksCorrectly.ts(17,16): error TS2536: Type 'unique symbol' cannot be used to index type 'T'.
tests/cases/compiler/lateBoundConstraintTypeChecksCorrectly.ts(18,17): error TS2536: Type 'unique symbol' cannot be used to index type 'T'.


==== tests/cases/compiler/lateBoundConstraintTypeChecksCorrectly.ts (2 errors) ====
    declare const fooProp: unique symbol;
    declare const barProp: unique symbol;
    
    type BothProps = typeof fooProp | typeof barProp;
    
    export interface Foo<T> {
      [fooProp]: T;
      [barProp]: string;
    }
    
    function f<T extends Foo<number>>(x: T) {
        const abc = x[fooProp]; // expected: 'T[typeof fooProp]'
    
        /**
         * Expected: no error
         */
        const def: T[typeof fooProp] = x[fooProp];
                   ~~~~~~~~~~~~~~~~~
!!! error TS2536: Type 'unique symbol' cannot be used to index type 'T'.
        const def2: T[typeof barProp] = x[barProp];
                    ~~~~~~~~~~~~~~~~~
!!! error TS2536: Type 'unique symbol' cannot be used to index type 'T'.
    }
    