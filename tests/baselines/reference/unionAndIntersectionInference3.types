=== tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference3.ts ===
// Repro from #30720

type Maybe<T> = T | undefined;
>Maybe : Maybe<T>

declare function concatMaybe<T>(...args: (Maybe<T> | Maybe<T>[])[]): T[];
>concatMaybe : <T>(...args: (T | Maybe<T>[] | undefined)[]) => T[]
>args : (T | Maybe<T>[] | undefined)[]

concatMaybe([1, 2, 3], 4);
>concatMaybe([1, 2, 3], 4) : number[]
>concatMaybe : <T>(...args: (T | Maybe<T>[] | undefined)[]) => T[]
>[1, 2, 3] : number[]
>1 : 1
>2 : 2
>3 : 3
>4 : 4

// Repros from #32247

const g: <U, R, S>(com: () => Iterator<S, U, R> | AsyncIterator<S, U, R>) => Promise<U> = async <U, R, S>(com: () => Iterator<S, U, R> | AsyncIterator<S, U, R>): Promise<U> => {
>g : <U, R, S>(com: () => Iterator<S, U, R> | AsyncIterator<S, U, R>) => Promise<U>
>com : () => Iterator<S, U, R> | AsyncIterator<S, U, R>
>async <U, R, S>(com: () => Iterator<S, U, R> | AsyncIterator<S, U, R>): Promise<U> => {  throw com;} : <U, R, S>(com: () => Iterator<S, U, R> | AsyncIterator<S, U, R>) => Promise<U>
>com : () => Iterator<S, U, R> | AsyncIterator<S, U, R>

  throw com;
>com : () => Iterator<S, U, R> | AsyncIterator<S, U, R>

};

interface Foo1<T> {
    test(value: T): void;
>test : (value: T) => void
>value : T
}

interface Bar1<T> {
    test(value: T | PromiseLike<T>): void;
>test : (value: T | PromiseLike<T>) => void
>value : T | PromiseLike<T>
}

declare let f1: <T>(x: Foo1<T> | Bar1<T>) => Promise<T>;
>f1 : <T>(x: Foo1<T> | Bar1<T>) => Promise<T>
>x : Foo1<T> | Bar1<T>

declare let f2: <U>(x: Foo1<U> | Bar1<U>) => Promise<U>;
>f2 : <U>(x: Foo1<U> | Bar1<U>) => Promise<U>
>x : Foo1<U> | Bar1<U>

f1 = f2;
>f1 = f2 : <U>(x: Foo1<U> | Bar1<U>) => Promise<U>
>f1 : <T>(x: Foo1<T> | Bar1<T>) => Promise<T>
>f2 : <U>(x: Foo1<U> | Bar1<U>) => Promise<U>

f2 = f1;
>f2 = f1 : <T>(x: Foo1<T> | Bar1<T>) => Promise<T>
>f2 : <U>(x: Foo1<U> | Bar1<U>) => Promise<U>
>f1 : <T>(x: Foo1<T> | Bar1<T>) => Promise<T>

type Foo2<T> = {
>Foo2 : Foo2<T>

    test(value: T): void;
>test : (value: T) => void
>value : T
}

type Bar2<T> = {
>Bar2 : Bar2<T>

    test(value: T | PromiseLike<T>): void;
>test : (value: T | PromiseLike<T>) => void
>value : T | PromiseLike<T>
}

declare let g1: <T>(x: Foo2<T> | Bar2<T>) => Promise<T>;
>g1 : <T>(x: Foo2<T> | Bar2<T>) => Promise<T>
>x : Foo2<T> | Bar2<T>

declare let g2: <U>(x: Foo2<U> | Bar2<U>) => Promise<U>;
>g2 : <U>(x: Foo2<U> | Bar2<U>) => Promise<U>
>x : Foo2<U> | Bar2<U>

g1 = g2;
>g1 = g2 : <U>(x: Foo2<U> | Bar2<U>) => Promise<U>
>g1 : <T>(x: Foo2<T> | Bar2<T>) => Promise<T>
>g2 : <U>(x: Foo2<U> | Bar2<U>) => Promise<U>

g2 = g1;
>g2 = g1 : <T>(x: Foo2<T> | Bar2<T>) => Promise<T>
>g2 : <U>(x: Foo2<U> | Bar2<U>) => Promise<U>
>g1 : <T>(x: Foo2<T> | Bar2<T>) => Promise<T>

