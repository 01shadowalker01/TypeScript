=== tests/cases/conformance/types/unknown/unknownType2.ts ===
type isUnknown<T> = unknown extends T ? true : false;
>isUnknown : isUnknown<T>
>true : true
>false : false

type isTrue<T extends true> = T;
>isTrue : T
>true : true

type SomeResponse = 'yes' | 'no' | 'idk';
>SomeResponse : SomeResponse

let validate: (x: unknown) => SomeResponse = x => (x === 'yes' || x === 'no') ? x : 'idk'; // No error
>validate : (x: unknown) => SomeResponse
>x : unknown
>x => (x === 'yes' || x === 'no') ? x : 'idk' : (x: unknown) => "yes" | "no" | "idk"
>x : unknown
>(x === 'yes' || x === 'no') ? x : 'idk' : SomeResponse
>(x === 'yes' || x === 'no') : boolean
>x === 'yes' || x === 'no' : boolean
>x === 'yes' : boolean
>x : unknown
>'yes' : "yes"
>x === 'no' : boolean
>x : unknown
>'no' : "no"
>x : "yes" | "no"
>'idk' : "idk"

const u: unknown = undefined;
>u : unknown
>undefined : undefined

declare const symb: unique symbol;
>symb : unique symbol

if (u === 5) {
>u === 5 : boolean
>u : unknown
>5 : 5

    const y = u.toString(10);
>y : string
>u.toString(10) : string
>u.toString : (radix?: number | undefined) => string
>u : 5
>toString : (radix?: number | undefined) => string
>10 : 10
}

if (u === true || u === false) {    
>u === true || u === false : boolean
>u === true : boolean
>u : unknown
>true : true
>u === false : boolean
>u : unknown
>false : false

    const someBool: boolean = u;
>someBool : boolean
>u : boolean
}

if (u === undefined) {
>u === undefined : boolean
>u : unknown
>undefined : undefined

    const undef: undefined = u;
>undef : undefined
>u : undefined
}

if (u === null) {
>u === null : boolean
>u : unknown
>null : null

    const someNull: null = u;
>someNull : null
>null : null
>u : null
}

if(u === symb) {
>u === symb : boolean
>u : unknown
>symb : unique symbol

    const symbolAlias: typeof symb = u;
>symbolAlias : unique symbol
>symb : unique symbol
>u : unique symbol
}

if (!(u === 42)) {
>!(u === 42) : boolean
>(u === 42) : boolean
>u === 42 : boolean
>u : unknown
>42 : 42

    u // u should still be `unknown` here
>u : unknown
}

if (u !== 42) {
>u !== 42 : boolean
>u : unknown
>42 : 42

    type A = isTrue<isUnknown<typeof u>>
>A : true
>u : unknown
}

if (u == 42) {
>u == 42 : boolean
>u : unknown
>42 : 42

    type B = isTrue<isUnknown<typeof u>>
>B : true
>u : unknown
}

if (u == true) {
>u == true : boolean
>u : unknown
>true : true

    type C = isTrue<isUnknown<typeof u>>
>C : true
>u : unknown
}

if (u == Object) {
>u == Object : boolean
>u : unknown
>Object : ObjectConstructor

    type D = isTrue<isUnknown<typeof u>>
>D : true
>u : unknown
}

