=== tests/cases/conformance/jsdoc/a.ts ===
export namespace foo {
>foo : Symbol(foo, Decl(a.ts, 0, 0))

    /** @deprecated */
    export function faff () { }
>faff : Symbol(faff, Decl(a.ts, 0, 22))

    faff()
>faff : Symbol(faff, Decl(a.ts, 0, 22))
}
const a = foo.faff() 
>a : Symbol(a, Decl(a.ts, 5, 5))
>foo.faff : Symbol(foo.faff, Decl(a.ts, 0, 22))
>foo : Symbol(foo, Decl(a.ts, 0, 0))
>faff : Symbol(foo.faff, Decl(a.ts, 0, 22))

foo["faff"]
>foo : Symbol(foo, Decl(a.ts, 0, 0))
>"faff" : Symbol(foo.faff, Decl(a.ts, 0, 22))

const { faff } = foo
>faff : Symbol(faff, Decl(a.ts, 7, 7))
>foo : Symbol(foo, Decl(a.ts, 0, 0))

faff()
>faff : Symbol(faff, Decl(a.ts, 7, 7))

/** @deprecated */
export function bar () {
>bar : Symbol(bar, Decl(a.ts, 8, 6))

    foo?.faff()
>foo?.faff : Symbol(foo.faff, Decl(a.ts, 0, 22))
>foo : Symbol(foo, Decl(a.ts, 0, 0))
>faff : Symbol(foo.faff, Decl(a.ts, 0, 22))
}
foo?.["faff"]?.()
>foo : Symbol(foo, Decl(a.ts, 0, 0))
>"faff" : Symbol(foo.faff, Decl(a.ts, 0, 22))

bar();
>bar : Symbol(bar, Decl(a.ts, 8, 6))

/** @deprecated */
export interface Foo {
>Foo : Symbol(Foo, Decl(a.ts, 14, 6))

    /** @deprecated */
    zzz: number
>zzz : Symbol(Foo.zzz, Decl(a.ts, 16, 22))
}
/** @deprecated */
export type QW = Foo["zzz"]
>QW : Symbol(QW, Decl(a.ts, 19, 1))
>Foo : Symbol(Foo, Decl(a.ts, 14, 6))

export type WQ = QW
>WQ : Symbol(WQ, Decl(a.ts, 21, 27))
>QW : Symbol(QW, Decl(a.ts, 19, 1))

=== tests/cases/conformance/jsdoc/b.ts ===
import * as f from './a';
>f : Symbol(f, Decl(b.ts, 0, 6))

import { bar, QW } from './a';
>bar : Symbol(bar, Decl(b.ts, 1, 8))
>QW : Symbol(QW, Decl(b.ts, 1, 13))

f.bar();
>f.bar : Symbol(f.bar, Decl(a.ts, 8, 6))
>f : Symbol(f, Decl(b.ts, 0, 6))
>bar : Symbol(f.bar, Decl(a.ts, 8, 6))

f.foo.faff();
>f.foo.faff : Symbol(f.foo.faff, Decl(a.ts, 0, 22))
>f.foo : Symbol(f.foo, Decl(a.ts, 0, 0))
>f : Symbol(f, Decl(b.ts, 0, 6))
>foo : Symbol(f.foo, Decl(a.ts, 0, 0))
>faff : Symbol(f.foo.faff, Decl(a.ts, 0, 22))

bar();
>bar : Symbol(bar, Decl(b.ts, 1, 8))

type Z = QW;
>Z : Symbol(Z, Decl(b.ts, 4, 6))
>QW : Symbol(QW, Decl(b.ts, 1, 13))

type A = f.Foo;
>A : Symbol(A, Decl(b.ts, 5, 12))
>f : Symbol(f, Decl(b.ts, 0, 6))
>Foo : Symbol(f.Foo, Decl(a.ts, 14, 6))

type B = f.QW;
>B : Symbol(B, Decl(b.ts, 6, 15))
>f : Symbol(f, Decl(b.ts, 0, 6))
>QW : Symbol(f.QW, Decl(a.ts, 19, 1))

type C = f.WQ;
>C : Symbol(C, Decl(b.ts, 7, 14))
>f : Symbol(f, Decl(b.ts, 0, 6))
>WQ : Symbol(f.WQ, Decl(a.ts, 21, 27))

type O = Z | A | B | C;
>O : Symbol(O, Decl(b.ts, 8, 14))
>Z : Symbol(Z, Decl(b.ts, 4, 6))
>A : Symbol(A, Decl(b.ts, 5, 12))
>B : Symbol(B, Decl(b.ts, 6, 15))
>C : Symbol(C, Decl(b.ts, 7, 14))

