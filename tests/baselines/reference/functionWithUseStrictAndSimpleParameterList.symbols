=== tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList.ts ===
function a(a = 10) {
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 0, 0))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 0, 11))

    "use strict";
}

export var foo = 10;
>foo : Symbol(foo, Decl(functionWithUseStrictAndSimpleParameterList.ts, 4, 10))

function b(a = 10) {
>b : Symbol(b, Decl(functionWithUseStrictAndSimpleParameterList.ts, 4, 20))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 5, 11))
}

function container() {
>container : Symbol(container, Decl(functionWithUseStrictAndSimpleParameterList.ts, 6, 1))

    "use strict";
    function f(a = 10) {
>f : Symbol(f, Decl(functionWithUseStrictAndSimpleParameterList.ts, 9, 17))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 10, 15))
    }
}

function rest(...args: any[]) {
>rest : Symbol(rest, Decl(functionWithUseStrictAndSimpleParameterList.ts, 12, 1))
>args : Symbol(args, Decl(functionWithUseStrictAndSimpleParameterList.ts, 14, 14))

    'use strict';
}

function paramDefault(param = 1) {
>paramDefault : Symbol(paramDefault, Decl(functionWithUseStrictAndSimpleParameterList.ts, 16, 1))
>param : Symbol(param, Decl(functionWithUseStrictAndSimpleParameterList.ts, 18, 22))

    'use strict';
}

function objectBindingPattern({foo}: any) {
>objectBindingPattern : Symbol(objectBindingPattern, Decl(functionWithUseStrictAndSimpleParameterList.ts, 20, 1))
>foo : Symbol(foo, Decl(functionWithUseStrictAndSimpleParameterList.ts, 22, 31))

    'use strict';
}

function arrayBindingPattern([foo]: any[]) {
>arrayBindingPattern : Symbol(arrayBindingPattern, Decl(functionWithUseStrictAndSimpleParameterList.ts, 24, 1))
>foo : Symbol(foo, Decl(functionWithUseStrictAndSimpleParameterList.ts, 26, 30))

    'use strict';
}

function manyParameter(a = 10, b = 20) {
>manyParameter : Symbol(manyParameter, Decl(functionWithUseStrictAndSimpleParameterList.ts, 28, 1))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 30, 23))
>b : Symbol(b, Decl(functionWithUseStrictAndSimpleParameterList.ts, 30, 30))

    "use strict";
}

function manyPrologue(a = 10, b = 20) {
>manyPrologue : Symbol(manyPrologue, Decl(functionWithUseStrictAndSimpleParameterList.ts, 32, 1))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 34, 22))
>b : Symbol(b, Decl(functionWithUseStrictAndSimpleParameterList.ts, 34, 29))

    "foo";
    "use strict";
}

function invalidPrologue(a = 10, b = 20) {
>invalidPrologue : Symbol(invalidPrologue, Decl(functionWithUseStrictAndSimpleParameterList.ts, 37, 1))
>a : Symbol(a, Decl(functionWithUseStrictAndSimpleParameterList.ts, 39, 25))
>b : Symbol(b, Decl(functionWithUseStrictAndSimpleParameterList.ts, 39, 32))

    "foo";
    const c = 1;
>c : Symbol(c, Decl(functionWithUseStrictAndSimpleParameterList.ts, 41, 9))

    "use strict";
}

