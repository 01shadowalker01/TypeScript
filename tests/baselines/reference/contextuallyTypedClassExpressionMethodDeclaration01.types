=== tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedClassExpressionMethodDeclaration01.ts ===
interface A {
    numProp: number;
>numProp : number
}

interface B  {
    strProp: string;
>strProp : string
}

interface Foo {
    method1(arg: A): void;
>method1 : (arg: A) => void
>arg : A

    method2(arg: B): void;
>method2 : (arg: B) => void
>arg : B
}

function getFoo1(): Foo {
>getFoo1 : () => Foo

    return class {
>class {        static method1(arg) {            arg.numProp = 10;        }        static method2(arg) {            arg.strProp = "hello";        }    } : typeof (Anonymous class)

        static method1(arg) {
>method1 : (arg: { numProp: number; }) => void
>arg : { numProp: number; }

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : number
>arg : { numProp: number; }
>numProp : number
>10 : 10
        }
        static method2(arg) {
>method2 : (arg: { strProp: string; }) => void
>arg : { strProp: string; }

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : string
>arg : { strProp: string; }
>strProp : string
>"hello" : "hello"
        }
    }
}

function getFoo2(): Foo {
>getFoo2 : () => Foo

    return class {
>class {        static method1 = (arg) => {            arg.numProp = 10;        }        static method2 = (arg) => {            arg.strProp = "hello";        }    } : typeof (Anonymous class)

        static method1 = (arg) => {
>method1 : (arg: { numProp: number; }) => void
>(arg) => {            arg.numProp = 10;        } : (arg: { numProp: number; }) => void
>arg : { numProp: number; }

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : number
>arg : { numProp: number; }
>numProp : number
>10 : 10
        }
        static method2 = (arg) => {
>method2 : (arg: { strProp: string; }) => void
>(arg) => {            arg.strProp = "hello";        } : (arg: { strProp: string; }) => void
>arg : { strProp: string; }

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : string
>arg : { strProp: string; }
>strProp : string
>"hello" : "hello"
        }
    }
}

function getFoo3(): Foo {
>getFoo3 : () => Foo

    return class {
>class {        static method1 = function (arg) {            arg.numProp = 10;        }        static method2 = function (arg) {            arg.strProp = "hello";        }    } : typeof (Anonymous class)

        static method1 = function (arg) {
>method1 : (arg: { numProp: number; }) => void
>function (arg) {            arg.numProp = 10;        } : (arg: { numProp: number; }) => void
>arg : { numProp: number; }

            arg.numProp = 10;
>arg.numProp = 10 : 10
>arg.numProp : number
>arg : { numProp: number; }
>numProp : number
>10 : 10
        }
        static method2 = function (arg) {
>method2 : (arg: { strProp: string; }) => void
>function (arg) {            arg.strProp = "hello";        } : (arg: { strProp: string; }) => void
>arg : { strProp: string; }

            arg.strProp = "hello";
>arg.strProp = "hello" : "hello"
>arg.strProp : string
>arg : { strProp: string; }
>strProp : string
>"hello" : "hello"
        }
    }
}
