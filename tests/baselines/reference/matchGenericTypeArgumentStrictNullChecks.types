=== tests/cases/conformance/types/match/matchGenericTypeArgumentStrictNullChecks.ts ===
// all of these test `match` with generics and --strictNullChecks.

// empty
type A<T> = T match {
>A : never
>T : T
>T : T

};
declare const A1: A<1>;
>A1 : never
>A : never

declare const A1or2: A<1 | 2>;
>A1or2 : never
>A : never

declare const Astring: A<"">;
>Astring : never
>A : never

declare const Aempty: A<{}>;
>Aempty : never
>A : never

declare const Anever: A<never>;
>Anever : never
>A : never

declare const Aany: A<any>;
>Aany : never
>A : never

declare const Aundefined: A<undefined>;
>Aundefined : never
>A : never

// only else
type B<T> = T match {
>B : "else"
>T : T
>T : T

    else: "else"
};
declare const B1: B<1>;
>B1 : "else"
>B : "else"

declare const B1or2: B<1 | 2>;
>B1or2 : "else"
>B : "else"

declare const Bstring: B<"">;
>Bstring : "else"
>B : "else"

declare const Bempty: B<{}>;
>Bempty : "else"
>B : "else"

declare const Bnever: B<never>;
>Bnever : "else"
>B : "else"

declare const Bany: B<any>;
>Bany : "else"
>B : "else"

declare const Bundefined: B<undefined>;
>Bundefined : "else"
>B : "else"

// only one exact match, no else
type C<T> = T match {
>C : C<T>
>T : T
>T : T

    1: "1"
};
declare const C1: C<1>;
>C1 : "1"
>C : C<T>

declare const C1or2: C<1 | 2>;
>C1or2 : "1"
>C : C<T>

declare const Cstring: C<"">;
>Cstring : never
>C : C<T>

declare const Cempty: C<{}>;
>Cempty : never
>C : C<T>

declare const Cnever: C<never>;
>Cnever : "1"
>C : C<T>

declare const Cany: C<any>;
>Cany : "1"
>C : C<T>

declare const Cundefined: C<undefined>;
>Cundefined : never
>C : C<T>

// only one subtype match, no else
type D<T> = T match {
>D : D<T>
>T : T
>T : T

    number: "number"
};
declare const D1: D<1>;
>D1 : "number"
>D : D<T>

declare const D1or2: D<1 | 2>;
>D1or2 : "number"
>D : D<T>

declare const Dstring: D<"">;
>Dstring : never
>D : D<T>

declare const Dempty: D<{}>;
>Dempty : never
>D : D<T>

declare const Dnever: D<never>;
>Dnever : "number"
>D : D<T>

declare const Dany: D<any>;
>Dany : "number"
>D : D<T>

declare const Dundefined: D<undefined>;
>Dundefined : never
>D : D<T>

// multiple possible subtype matches, no else
type E<T> = T match {
>E : E<T>
>T : T
>T : T

    1 | 2: "1 | 2",
    number: "number"
};
declare const E1: E<1>;
>E1 : "1 | 2"
>E : E<T>

declare const E1or2: E<1 | 2>;
>E1or2 : "1 | 2"
>E : E<T>

declare const E3: E<3>;
>E3 : "number"
>E : E<T>

declare const Estring: E<"">;
>Estring : never
>E : E<T>

declare const Eempty: E<{}>;
>Eempty : never
>E : E<T>

declare const Enever: E<never>;
>Enever : "1 | 2"
>E : E<T>

declare const Eany: E<any>;
>Eany : "1 | 2"
>E : E<T>

declare const Eundefined: E<undefined>;
>Eundefined : never
>E : E<T>

// multiple possible matches (subtype first), no else
type F<T> = T match {
>F : F<T>
>T : T
>T : T

    1 | 2: "1 | 2",
    1: "1",
    number: "number"
};
declare const F1: F<1>;
>F1 : "1 | 2"
>F : F<T>

declare const F1or2: F<1 | 2>;
>F1or2 : "1 | 2"
>F : F<T>

declare const F2or3: F<2 | 3>;
>F2or3 : "number" | "1 | 2"
>F : F<T>

declare const F3: F<3>;
>F3 : "number"
>F : F<T>

declare const Fstring: F<"">;
>Fstring : never
>F : F<T>

declare const Fempty: F<{}>;
>Fempty : never
>F : F<T>

declare const Fnever: F<never>;
>Fnever : "1 | 2"
>F : F<T>

declare const Fany: F<any>;
>Fany : "1 | 2"
>F : F<T>

declare const Fundefined: F<undefined>;
>Fundefined : never
>F : F<T>

// never
type G<T> = T match {
>G : G<T>
>T : T
>T : T

    never: "never",
    number: "number",
    else: "else"
};
declare const G1: G<1>;
>G1 : "number"
>G : G<T>

declare const G1or2: G<1 | 2>;
>G1or2 : "number"
>G : G<T>

declare const Gstring: G<"">;
>Gstring : "else"
>G : G<T>

declare const Gempty: G<{}>;
>Gempty : "else"
>G : G<T>

declare const Gnever: G<never>;
>Gnever : "never"
>G : G<T>

declare const Gany: G<any>;
>Gany : "number"
>G : G<T>

declare const Gundefined: G<undefined>;
>Gundefined : "else"
>G : G<T>

// undefined
type H<T> = T match {
>H : H<T>
>T : T
>T : T

    undefined: "undefined",
    number: "number",
    else: "else"
};
declare const H1: H<1>;
>H1 : "number"
>H : H<T>

declare const H1or2: H<1 | 2>;
>H1or2 : "number"
>H : H<T>

declare const Hstring: H<"">;
>Hstring : "else"
>H : H<T>

declare const Hempty: H<{}>;
>Hempty : "else"
>H : H<T>

declare const Hnever: H<never>;
>Hnever : "undefined"
>H : H<T>

declare const Hany: H<any>;
>Hany : "undefined"
>H : H<T>

declare const Hundefined: H<undefined>;
>Hundefined : "undefined"
>H : H<T>

