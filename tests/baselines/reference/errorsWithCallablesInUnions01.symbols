=== tests/cases/compiler/errorsWithCallablesInUnions01.ts ===
interface IDirectiveLinkFn<TScope> {
>IDirectiveLinkFn : Symbol(IDirectiveLinkFn, Decl(errorsWithCallablesInUnions01.ts, 0, 0))
>TScope : Symbol(TScope, Decl(errorsWithCallablesInUnions01.ts, 0, 27))

    (scope: TScope): void;
>scope : Symbol(scope, Decl(errorsWithCallablesInUnions01.ts, 1, 5))
>TScope : Symbol(TScope, Decl(errorsWithCallablesInUnions01.ts, 0, 27))
}

interface IDirectivePrePost<TScope> {
>IDirectivePrePost : Symbol(IDirectivePrePost, Decl(errorsWithCallablesInUnions01.ts, 2, 1))
>TScope : Symbol(TScope, Decl(errorsWithCallablesInUnions01.ts, 4, 28))

    pre?: IDirectiveLinkFn<TScope>;
>pre : Symbol(IDirectivePrePost.pre, Decl(errorsWithCallablesInUnions01.ts, 4, 37))
>IDirectiveLinkFn : Symbol(IDirectiveLinkFn, Decl(errorsWithCallablesInUnions01.ts, 0, 0))
>TScope : Symbol(TScope, Decl(errorsWithCallablesInUnions01.ts, 4, 28))

    post?: IDirectiveLinkFn<TScope>;
>post : Symbol(IDirectivePrePost.post, Decl(errorsWithCallablesInUnions01.ts, 5, 35))
>IDirectiveLinkFn : Symbol(IDirectiveLinkFn, Decl(errorsWithCallablesInUnions01.ts, 0, 0))
>TScope : Symbol(TScope, Decl(errorsWithCallablesInUnions01.ts, 4, 28))
}

export let blah: IDirectiveLinkFn<number> | IDirectivePrePost<number> = (x: string) => {}
>blah : Symbol(blah, Decl(errorsWithCallablesInUnions01.ts, 9, 10))
>IDirectiveLinkFn : Symbol(IDirectiveLinkFn, Decl(errorsWithCallablesInUnions01.ts, 0, 0))
>IDirectivePrePost : Symbol(IDirectivePrePost, Decl(errorsWithCallablesInUnions01.ts, 2, 1))
>x : Symbol(x, Decl(errorsWithCallablesInUnions01.ts, 9, 73))

