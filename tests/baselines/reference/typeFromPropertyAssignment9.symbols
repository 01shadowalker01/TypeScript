=== tests/cases/conformance/salsa/a.js ===
// TODO: JSDoc would provide a contextual type, so ... I should test that
//  (a number of existing tests fail because of that, I think)
// TODO: Try initializer of function or class I guess (though classes aren't context sensitive)
// TODO: Duplicated declarations should be OK (if they have the same type (??))
var my = my || {};
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))

my.m = function() {
>my.m : Symbol(m, Decl(a.js, 4, 18))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>m : Symbol(m, Decl(a.js, 4, 18))

    return 1;
}
my.n = 1;
>my.n : Symbol(n, Decl(a.js, 7, 1))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>n : Symbol(n, Decl(a.js, 7, 1))

my.o = {};
>my.o : Symbol(o, Decl(a.js, 8, 9))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>o : Symbol(o, Decl(a.js, 8, 9))

my.predicate = my.predicate || {};
>my.predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my.predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))

my.predicate.query = function () {
>my.predicate.query : Symbol(query, Decl(a.js, 10, 34))
>my.predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>query : Symbol(query, Decl(a.js, 10, 34))

    var me = this;
>me : Symbol(me, Decl(a.js, 12, 7))
>this : Symbol(__object, Decl(a.js, 10, 30))

    me.property = false;
>me : Symbol(me, Decl(a.js, 12, 7))

};
var q = new my.predicate.query();
>q : Symbol(q, Decl(a.js, 15, 3))
>my.predicate.query : Symbol(query, Decl(a.js, 10, 34))
>my.predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>query : Symbol(query, Decl(a.js, 10, 34))

my.predicate.query.result = 'none'
>my.predicate.query.result : Symbol((Anonymous function).result, Decl(a.js, 15, 33))
>my.predicate.query : Symbol(query, Decl(a.js, 10, 34))
>my.predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>my : Symbol(my, Decl(a.js, 4, 3), Decl(a.js, 4, 18))
>predicate : Symbol(predicate, Decl(a.js, 9, 10), Decl(a.js, 10, 34))
>query : Symbol(query, Decl(a.js, 10, 34))
>result : Symbol((Anonymous function).result, Decl(a.js, 15, 33))

// my.predicate.sort = my.predicate.sort || function (first, second) {
    // return first;
// }

