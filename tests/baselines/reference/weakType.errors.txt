tests/cases/compiler/weakType.ts(31,18): error TS2345: Argument of type '{ error?: number; }' is not assignable to parameter of type 'ChangeOptions'.
  Weak type 'ChangeOptions' has no properties in common with '{ error?: number; }'.
tests/cases/compiler/weakType.ts(56,5): error TS2322: Type '{ properties: { wrong: string; }; }' is not assignable to type 'Weak & Spoiler'.
  Type '{ properties: { wrong: string; }; }' is not assignable to type 'Weak'.
    Types of property 'properties' are incompatible.
      Type '{ wrong: string; }' is not assignable to type '{ b?: number; }'.
        Weak type '{ b?: number; }' has no properties in common with '{ wrong: string; }'.


==== tests/cases/compiler/weakType.ts (2 errors) ====
    interface Settings {
        timeout?: number;
        onError?(): void;
    }
    
    function getDefaultSettings() {
        return { timeout: 1000 };
    }
    
    function doSomething(settings: Settings) { /* ... */ }
    
    // forgot to call `getDefaultSettings`
    // but it is not caught because we don't check for call signatures
    doSomething(getDefaultSettings);
    
    // this is an oddly popular way of defining settings
    // this example is from services/textChanges.ts
    type ConfigurableStart = { useStart?: boolean }
    type ConfigurableEnd = { useEnd?: boolean }
    type ConfigurableStartEnd = ConfigurableStart & ConfigurableEnd
    interface InsertOptions {
        prefix?: string
        suffix?: string
    }
    type ChangeOptions = ConfigurableStartEnd & InsertOptions;
    
    function del(options: ConfigurableStartEnd = {},
                 error: { error?: number } = {}) {
        let changes: ChangeOptions[];
        changes.push(options);
        changes.push(error);
                     ~~~~~
!!! error TS2345: Argument of type '{ error?: number; }' is not assignable to parameter of type 'ChangeOptions'.
!!! error TS2345:   Weak type 'ChangeOptions' has no properties in common with '{ error?: number; }'.
    }
    
    class K {
        constructor(s: string) { }
    }
    // Ctor isn't a weak type because it has a construct signature
    interface Ctor {
        new (s: string): K
        n?: number
    }
    let ctor: Ctor = K
    
    type Spoiler = { nope?: string }
    type Weak = {
        a?: number
        properties?: {
            b?: number
        }
    }
    declare let unknown: {
        properties: {
            wrong: string
        }
    }
    let weak: Weak & Spoiler = unknown
        ~~~~
!!! error TS2322: Type '{ properties: { wrong: string; }; }' is not assignable to type 'Weak & Spoiler'.
!!! error TS2322:   Type '{ properties: { wrong: string; }; }' is not assignable to type 'Weak'.
!!! error TS2322:     Types of property 'properties' are incompatible.
!!! error TS2322:       Type '{ wrong: string; }' is not assignable to type '{ b?: number; }'.
!!! error TS2322:         Weak type '{ b?: number; }' has no properties in common with '{ wrong: string; }'.
    