tests/cases/compiler/weakType.ts(31,18): error TS2345: Argument of type '{ error?: number; }' is not assignable to parameter of type 'ChangeOptions'.
  Weak type 'ChangeOptions' has no properties in common with '{ error?: number; }'.


==== tests/cases/compiler/weakType.ts (1 errors) ====
    interface Settings {
        timeout?: number;
        onError?(): void;
    }
    
    function getDefaultSettings() {
        return { timeout: 1000 };
    }
    
    function doSomething(settings: Settings) { /* ... */ }
    
    // forgot to call `getDefaultSettings`
    // but it is not caught because we don't check for call signatures
    doSomething(getDefaultSettings);
    
    // this is an oddly popular way of defining settings
    // this example is from services/textChanges.ts
    type ConfigurableStart = { useStart?: boolean }
    type ConfigurableEnd = { useEnd?: boolean }
    type ConfigurableStartEnd = ConfigurableStart & ConfigurableEnd
    interface InsertOptions {
        prefix?: string
        suffix?: string
    }
    type ChangeOptions = ConfigurableStartEnd & InsertOptions;
    
    function del(options: ConfigurableStartEnd = {},
                 error: { error?: number } = {}) {
        let changes: ChangeOptions[];
        changes.push(options);
        changes.push(error);
                     ~~~~~
!!! error TS2345: Argument of type '{ error?: number; }' is not assignable to parameter of type 'ChangeOptions'.
!!! error TS2345:   Weak type 'ChangeOptions' has no properties in common with '{ error?: number; }'.
    }
    